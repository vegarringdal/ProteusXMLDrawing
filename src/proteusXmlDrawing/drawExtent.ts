import { Extent } from "./types/Extent";
import { getPaper } from "./paper";
import { Point } from "paper/dist/paper-core";
import { Attribute } from "./Attribute";
import { debug } from "./debug";

export function getShapeFromExtent(
    ctx: { Extent?: Extent[]; element: HTMLElement; iD?: Attribute },
    unit: number,
    pageOriginX: number,
    pageOriginY: number,
    offsetX = 0,
    offsetY = 0,
    addDebug: boolean,
    debugColor: { red: number; green: number; blue: number; alpha: number }
) {
    if (ctx?.Extent?.length) {
        const maxX = ctx.Extent[0].Max[0].x.valueAsNumber;
        const minX = ctx.Extent[0].Min[0].x.valueAsNumber;
        const width = (maxX - minX) * unit < 1 ? 1 : (maxX - minX) * unit;

        const maxY = ctx.Extent[0].Max[0].y.valueAsNumber;
        const minY = ctx.Extent[0].Min[0].y.valueAsNumber;
        const height = (maxY - minY) * unit < 1 ? 1 : (maxY - minY) * unit;

        const x = offsetX * unit + minX * unit;
        const y = pageOriginY * unit - (maxY + offsetY) * unit;

        if (addDebug) {
            const Shape = getPaper().Shape;
            const Size = getPaper().Size;
            const Color = getPaper().Color;

            const size = new Size(width, height);
            const shape = new Shape.Rectangle(new Point(x, y), size);
            shape.fillColor = new Color(debugColor);
            shape.onClick = () => {
                console.log(ctx);
            };
            shape.bringToFront();
        }

        if (
            debug.highlightIds &&
            ctx.iD?.valueAsString &&
            IDToHighlight.indexOf(ctx.iD?.valueAsString) !== -1
        ) {
            const Shape = getPaper().Shape;
            const Size = getPaper().Size;
            const Color = getPaper().Color;

            const size = new Size(width, height);
            const shape = new Shape.Rectangle(new Point(x, y), size);
            shape.selected = true;
            shape.selectedColor = new Color("blue");
            shape.onClick = () => {
                console.log(ctx);
            };
            shape.bringToFront();
        }

        return [x, y, width, height];
    } else {
        return [0, 0, 0, 0];
    }
}
const IDToHighlight = `SP0AEFB31C8D6349A08C6129D4947A9A8D
SP66282166CC9D4F7C983A4D49CE2469DD
SG6F6016EE51154FF99635157C9CBCF7EC
SP1DD32CE9BE434865B5755E976B00AD6E
SGAD0C47D56740447694FAFF4F56AC21BC
SY6F6016EE51154FF99635157C9CBCF7EC
SP7C37D6FB993A41DB95D349722E653E69
SP92D22F0431084A21A7424893F03916BF
SG5CE8C83059544189BCB26B97EBCAA87D
SPCC511229063242AEA261B0B040CBE751
SGF896DE0CE6C24909A7E6141E1752A30A
SY5CE8C83059544189BCB26B97EBCAA87D
SP28948D355CC2465FB2CA390A01974C84
SPFF433ED3919D4EF7BDC2B9ECF1984E31
SG283F95B9A84E4616BD1F5FE9BA8F78E1
SP64A9F9D09C804C6E80D3DD2A85A1E257
SGD506DA1C52A344FBA6F9E62DEC0D9BD2
SY283F95B9A84E4616BD1F5FE9BA8F78E1
SP0973701C0859479C9D039A4C4B05458C
SP4EA73365175B4E4DAAD728D340F9E86C
SPFC7B2F54D1F943F09041B269B7B12258
SGC4FD2463C6E746B6933D3CBA0AB8D67F
SP40F2D4BB06AC491A96EBB0A3B820D687
SP21A7EDF6F5724AAA8C6B4A25EADE6DE0
SGB61CA82D532749568A561FC803DC0BB6
SP53AED44A33D049BBAC32D0728AA6C5C6
SP1A00A0178113473BAF570AE536AFCD00
SG15366EBE75134CD1A1CF4E93A4EAA924
SP224B692CD3E34DF0BF97C78ACA71FB65
SPF83E3036DB16414884B10E110DD14163
SGE3DEC42DA99E462ABCB849E51250EDB9
SPCE56F3C21D6B4E3FBF5610838F9B4D37
SGF0E7EFDBE2434C748492DC6BCDF5DE9D
SPC4C8B748D2084995B2D798EB838F308A
SG01AC192830814AF0BDBF6BC76FA2A0DD
SY01AC192830814AF0BDBF6BC76FA2A0DD
SP386431699E85421BA521956CAD19A1C1
SP9A47ACB47EF34B2E823802BA3C3F9A52
SP54A76CF848C44E81BCDA76E1DD509CD0
SG75055CBBD0A846E592EF5BA8BC7E3B13
SY75055CBBD0A846E592EF5BA8BC7E3B13
SP719714AC77D74EE8A6DE4BD01E473E7F
SGC146988E7DE94A46B6BE71D9A5447D98
SPC95442CDAE1D444FABE3CBC3AA16D88F
SPE197AC4688464BE9999055DFB02A5D47
SGF41581B8BEBC4F0CBCE8F8CDEC6DACC2
SYF41581B8BEBC4F0CBCE8F8CDEC6DACC2
SP571C695E2A7845759370A3E8EB0BEFC2
SP91BBC0D552CC41759AF7E639A2D735BB
SGFB095AE50F2E4C0FBF0F0D0A0AAD05AA
SYFB095AE50F2E4C0FBF0F0D0A0AAD05AA
SPCBDCDE1E17574DE9BBD612D41F9891DB
SP7E3EC3B70AF246F3B548E4AE3539511D
SGD90EE64CE3074EE086C5577325758562
SYD90EE64CE3074EE086C5577325758562
SPF001B6113D0440D98DE32690F742FFC8
SP5DD854A4BFCB4AF3A67325136264889E
SP5F1A70F6302442F68EE08D023ADFC01F
SG7132AE0705B4462EBF4CCAFD98EB9C47
SPBB98B78A5F3043EEAE7CCE5717FAB89F
SP46F2E8247AA94F268AF80D43D0F4ACE8
SP25ECAD1B370346D1AFDAB900C8139A9D
SG8F349591FE814AE7AF2B1036B87E2CED
SY8F349591FE814AE7AF2B1036B87E2CED
SP9ABE282CB7044EDF9049129618EAFDA3
SP3E3986CB4A2441A3AFB76F2D2905C4B8
SG3493F90D60BA4145ABEAEC488CE1D121
SY3493F90D60BA4145ABEAEC488CE1D121
SPABB697C6C1644EB38EC1FE1D2753A761
SP46B8DC4B095248468C1C0ACD6B926551
SG561D52C508CE4E39A5FEC8B586176933
SY561D52C508CE4E39A5FEC8B586176933
SP9717FAB059454D948D72072B8FAB7A0A
SP4E3D714B80684A1690667ABFE6D65F0F
SP5BEAA4109F07490495EE4397010D3531
SP6ABC456BAF304F45B8B3D8A3F5C87207
SP1BA42A124ECB411AA5405FBBFB00295B
SP213674C68CE44098BF09684C147300AC
SPFDA22855B46E4491A19A643962401EA5
SP0D0AEDD42B094B41A7B30267753F44B1
SP74B8270529954F43A7FE1BF7E757781D
SPAA63F755D4014BA89C45B50F8F7994A1
SPC65AF7E081064713A34E78A21C0CDE5D
SP2DE1D388823C47E18955F8E81E0B7CFB
SP32C5720085E549D08AA857615C8DC875
SP19620037922D4F71A38365292CADCBD6
SP6D132ED1236C45CB8E2E619963FF426A
SP245A0E42F3B54175BF92B2D76FE20CA7
SP3E69BFA5CB8542EE95A73C1DAF4998A3
`.split("\n");
